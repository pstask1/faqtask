<?php
/*
* Admin
*/

class FAQ extends ObjectModel
{
	/** @var string Name */
	public $question;
	public $answer;
	public $id_faq_category;
	public $position;
	public $active;
	public $date_add;
	public $date_upd;

	/**
	 * @see ObjectModel::$definition
	 */
	public static $definition = array(
		'table' => 'faq',
		'primary' => 'id_faq',
		'multilang' => true,
		'fields' => array(
			'id_faq_category' => 	array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt','required'=>true),
			'position' => 			array('type' => self::TYPE_INT),
			'active' => 			array('type' => self::TYPE_BOOL),
			'date_add'	=>
				array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
			'date_upd'	=>
				array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
			// Lang fields
			'answer' => 			array('type' => self::TYPE_HTML, 'lang' => true, 'validate' => 'isCleanHtml', 'required' => true, 'size' => 3999999999999),
			'question' => 			array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isGenericName', 'required' => true, 'size' => 255),

		),
	);

	public function __construct( $id = null, $id_lang = null, $id_shop = null ) {

			Shop::addTableAssociation('faq', array(
				'type'=> 'shop'
			));
		parent::__construct( $id, $id_lang, $id_shop ); // TODO: Change the autogenerated stub
	}


	public function add($autodate = true, $null_values = false)
	{
		$this->position = FAQ::getLastPosition((int)$this->id_faq_category);
		return parent::add($autodate, true);
	}

	public function update($null_values = false)
	{
		if (parent::update($null_values))
			return $this->cleanPositions($this->id_faq_category);
		return false;
	}

	public function delete()
	{
	 	if (parent::delete())
			return $this->cleanPositions($this->id_faq_category);
		return false;
	}

	public static function getLinks($id_lang, $selection = null, $active = true, Link $link = null)
	{
		if (!$link)
			$link = new Link;
			
			//$link = Context::getContext()->link;			
		$result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('
		SELECT c.id_faq, cl.link_rewrite, cl.meta_title
		FROM '._DB_PREFIX_.'faq c
		LEFT JOIN '._DB_PREFIX_.'faq_lang cl ON (c.id_faq = cl.id_faq AND cl.id_lang = '.(int)$id_lang.')
		'.Shop::addSqlAssociation('faq', 'c').'
		WHERE 1
		'.(($selection !== null) ? ' AND c.id_faq IN ('.implode(',', array_map('intval', $selection)).')' : '').
		($active ? ' AND c.`active` = 1 ' : '').
		'GROUP BY c.id_faq
		ORDER BY c.`position`');

		$links = array();
		if ($result)
			foreach ($result as $row)
			{
				$row['link'] = $link->getFAQLink((int)$row['id_faq'], $row['link_rewrite']);
				$links[] = $row;
			}
		return $links;
	}

	public static function listFaq($id_lang = null, $id_block = false, $active = true)
	{
		if (empty($id_lang))
			$id_lang = (int)Configuration::get('PS_LANG_DEFAULT');

		return Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('
		SELECT c.id_faq, l.meta_title
		FROM  '._DB_PREFIX_.'faq c
		JOIN '._DB_PREFIX_.'faq_lang l ON (c.id_faq = l.id_faq)
		'.Shop::addSqlAssociation('faq', 'c').'
		'.(($id_block) ? 'JOIN '._DB_PREFIX_.'block_faq b ON (c.id_faq = b.id_faq)' : '').'
		WHERE l.id_lang = '.(int)$id_lang.(($id_block) ? ' AND b.id_block = '.(int)$id_block : '').($active ? ' AND c.`active` = 1 ' : '').'
		GROUP BY c.id_faq
		ORDER BY c.`position`');
	}

	public function updatePosition($way, $position)
	{
		if (!$res = Db::getInstance()->executeS('
			SELECT cp.`id_faq`, cp.`position`, cp.`id_faq_category`
			FROM `'._DB_PREFIX_.'faq` cp
			WHERE cp.`id_faq_category` = '.(int)$this->id_faq_category.'
			ORDER BY cp.`position` ASC'
		))
			return false;

		foreach ($res as $faq)
			if ((int)$faq['id_faq'] == (int)$this->id)
				$moved_faq = $faq;

		if (!isset($moved_faq) || !isset($position))
			return false;



		// < and > statements rather than BETWEEN operator
		// since BETWEEN is treated differently according to databases
		return (Db::getInstance()->execute('
			UPDATE `'._DB_PREFIX_.'faq`
			SET `position`= `position` '.($way ? '- 1' : '+ 1').'
			WHERE `position`
			'.($way
				? '> '.(int)$moved_faq['position'].' AND `position` <= '.(int)$position
				: '< '.(int)$moved_faq['position'].' AND `position` >= '.(int)$position).'
			AND `id_faq_category`='.(int)$moved_faq['id_faq_category'])
		&& Db::getInstance()->execute('
			UPDATE `'._DB_PREFIX_.'faq`
			SET `position` = '.(int)$position.'
			WHERE `id_faq` = '.(int)$moved_faq['id_faq'].'
			AND `id_faq_category`='.(int)$moved_faq['id_faq_category']));
	}

	public static function cleanPositions($id_category)
	{
		$sql = '
		SELECT `id_faq`
		FROM `'._DB_PREFIX_.'faq`
		WHERE `id_faq_category` = '.(int)$id_category.'
		ORDER BY `position`';

		$result = Db::getInstance()->executeS($sql);

		for ($i = 0, $total = count($result); $i < $total; ++$i)
		{
			$sql = 'UPDATE `'._DB_PREFIX_.'faq`
					SET `position` = '.(int)$i.'
					WHERE `id_faq_category` = '.(int)$id_category.'
						AND `id_faq` = '.(int)$result[$i]['id_faq'];
			Db::getInstance()->execute($sql);
		}
		return true;
	}

	public static function getLastPosition($id_category)
	{
		$sql = '
		SELECT MAX(position) + 1
		FROM `'._DB_PREFIX_.'faq`
		WHERE `id_faq_category` = '.(int)$id_category;

		return (Db::getInstance()->getValue($sql));
	}

	public static function getFAQPages($id_lang = null, $id_faq_category = null, $active = true, $id_shop = null, $limit = null, $query = null)
	{ 
		$sql = new DbQuery();
		$sql->select('*');
		$sql->from('faq', 'c');
		if ($id_lang)
			$sql->leftJoin('faq_lang', 'l', 'c.id_faq = l.id_faq AND l.id_lang = '.(int)$id_lang);

		if ($id_shop)
			$sql->innerJoin('faq_shop', 'cs', 'c.id_faq = cs.id_faq AND cs.id_shop = '.(int)$id_shop);

		if ($active)
			$sql->where('c.active = 1');

//		if ($query)
//			$sql->where('l.`question` LIKE \'%'.pSQL($query).'%\' OR l.`answer` LIKE \'%'.pSQL($query).'%\'');
//
		if ($id_faq_category)
			$sql->where('c.id_faq_category = '.(int)$id_faq_category);						

		$sql->orderBy('position');


		if ($limit)
			$sql->limit($limit);			


		return Db::getInstance()->executeS($sql);
	}


	public static function getUrlRewriteInformations($id_faq)
	{
	    $sql = 'SELECT l.`id_lang`, c.`link_rewrite`
				FROM `'._DB_PREFIX_.'faq_lang` AS c
				LEFT JOIN  `'._DB_PREFIX_.'lang` AS l ON c.`id_lang` = l.`id_lang`
				WHERE c.`id_faq` = '.(int)$id_faq.'
				AND l.`active` = 1';

		return Db::getInstance()->executeS($sql);
	}
}
