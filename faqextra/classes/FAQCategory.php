<?php
/*
* 2007-2013 PrestaShop
*
* NOTICE OF LICENSE
*
* This source file is subject to the Open Software License (OSL 3.0)
* that is bundled with this package in the file LICENSE.txt.
* It is also available through the world-wide-web at this URL:
* http://opensource.org/licenses/osl-3.0.php
* If you did not receive a copy of the license and are unable to
* obtain it through the world-wide-web, please send an email
* to license@prestashop.com so we can send you a copy immediately.
*
* DISCLAIMER
*
* Do not edit or add to this file if you wish to upgrade PrestaShop to newer
* versions in the future. If you wish to customize PrestaShop for your
* needs please refer to http://www.prestashop.com for more information.
*
*  @author PrestaShop SA <contact@prestashop.com>
*  @copyright  2007-2013 PrestaShop SA
*  @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
*  International Registered Trademark & Property of PrestaShop SA
*/

class FAQCategory extends ObjectModel
{
	
	public $id;
	public $id_faq_category;
	public $name;
	public $active;
	public $description;
	public $id_parent;
	public $position;
	public $level_depth;
	public $nleft;
	public $nright;
	public $link_rewrite;
	public $meta_title;
	public $meta_keywords;
	public $meta_description;
	public $date_add;
	public $date_upd;
	public $indexation;

	protected static $_links = array();

	/**
	 * @see ObjectModel::$definition
	 */
	public static $definition = array(
		'table' => 'faq_category',
		'primary' => 'id_faq_category',
		'multilang' => true,
		'multishop'=> true,
		'fields' => array(
			'active' => 			array('type' => self::TYPE_BOOL),
			'id_parent' => 			array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => true),
			'position' => 			array('type' => self::TYPE_INT),
			'indexation' =>     	array('type' => self::TYPE_BOOL),
			'level_depth' => 		array('type' => self::TYPE_INT),
			'nleft'		=> array('type'=>self::TYPE_INT,'validate'=>'isInt'),
			'nright'	=> array('type'=>self::TYPE_INT,'validate'=>'isInt'),
			'date_add' => 			array('type' => self::TYPE_DATE,   'validate' => 'isDate'),
			'date_upd' => 			array('type' => self::TYPE_DATE,   'validate' => 'isDate'),

			// Lang fields
			'name' => 				array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isCatalogName', 'required' => true, 'size' => 64),
			'link_rewrite' => 		array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isLinkRewrite', 'required' => true, 'size' => 64),
			'description' => 		array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isCleanHtml'),			
			'meta_title' => 		array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isGenericName', 'size' => 128),
			'meta_description' => 	array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isGenericName', 'size' => 255),
			'meta_keywords' => 		array('type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isGenericName', 'size' => 255),
		),
	);

	public function __construct( $id = null, $id_lang = null, $id_shop = null ) {
		Shop::addTableAssociation('faq_category', array(
			'type'=> 'shop'
		));
		parent::__construct( $id, $id_lang, $id_shop ); // TODO: Change the autogenerated stub
	}


	public function add($autodate = true, $nullValues = false) {
		$this->position = self::getLastPosition((int)$this->id_parent);
		if (!isset($this->level_depth))
			$this->level_depth = $this->calcLevelDepth();


		$add = parent::add($autodate, $nullValues);

		return $add;
	}
	public function toggleStatus(){
		$ret =  parent::toggleStatus();

		/// use toDelete method , jst to get category and all of its subcategories we want to toggle status
		$toToggle = array((int)($this->id));
		$this->recursiveDelete($toToggle, (int)($this->id));
		$toToggle = array_unique($toToggle);

		$list = implode(', ', $toToggle);
		if($this->active==1)
			DB::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'faq_category` set active = 1 where id_faq_category in ('.$list.')');
		else
			DB::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'faq_category` set active = 0 where id_faq_category in ('.$list.')');
		return $ret;
	}
	public function update($nullValues = false) {
		$this->level_depth = $this->calcLevelDepth();

		$this->cleanPositions((int)$this->id_parent);
		if ($this->getDuplicatePosition())
			$this->position = self::getLastPosition((int)$this->id_parent);
		$ret = parent::update($nullValues);
		self::regenerateEntireNtree();
		$this->recalculateLevelDepth($this->id);

		/// use toDelete method , jst to get category and all of its subcategories we want to toggle status
		$toToggle = array((int)($this->id));
		$this->recursiveDelete($toToggle, (int)($this->id));
		$toToggle = array_unique($toToggle);
		$list = implode(', ', $toToggle);
		if($this->active==1)
			DB::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'faq_category` set active = 1 where id_faq_category in ('.$list.')');
		else
			DB::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'faq_category` set active = 0 where id_faq_category in ('.$list.')');



		return $ret;
	}
	public static function getLastPosition($id_faq_category_parent)
	{
		return (Db::getInstance()->getValue('SELECT MAX(position)+1 FROM `'._DB_PREFIX_.'faq_category` WHERE `id_parent` = '.(int)($id_faq_category_parent)));
	}



	public function delete() {
		if ((int)($this->id) === 0 OR (int)($this->id) === 1) return false;
		$this->clearCache();
		/* Get childs categories */
		$toDelete = array((int)($this->id));
		$this->recursiveDelete($toDelete, (int)($this->id));
		$toDelete = array_unique($toDelete);


		/* Delete category and its child from database */
		$list = sizeof($toDelete) > 1 ?  implode(',', array_map('intval',$toDelete)) : (int)($this->id);
		Db::getInstance()->Execute('DELETE FROM `'._DB_PREFIX_.'faq_category` WHERE `id_faq_category` IN ('.$list.')');
		Db::getInstance()->Execute('DELETE FROM `'._DB_PREFIX_.'faq_category_lang` WHERE `id_faq_category` IN ('.$list.')');

		self::cleanPositions($this->id_parent);
		$delete = parent::delete();

		$faqs = DB::getInstance()->ExecuteS('SELECT * FROM `'._DB_PREFIX_.'faq` WHERE id_faq_category IN ('.$list.')');
		foreach($faqs as $faq){

			$f = new Faq($faq['id_faq']);
			$f->delete();
		}
		DB::getInstance()->delete('faq_category_cms','id_faq_category = '.$this->id);




		return $delete;
	}
	protected function recursiveDelete(&$toDelete, $id_faq_category)
	{
		if (!is_array($toDelete) OR !$id_faq_category)
			die(Tools::displayError());

		$result = Db::getInstance()->ExecuteS('
		SELECT `id_faq_category`
		FROM `'._DB_PREFIX_.'faq_category`
		WHERE `id_parent` = '.(int)($id_faq_category));
		foreach ($result AS $row)
		{
			$toDelete[] = (int)($row['id_faq_category']);
			$this->recursiveDelete($toDelete, (int)($row['id_faq_category']));
		}
	}
	/**
	 * Hide FAQCategory prefix used for position
	 *
	 * @param string $name FAQCategory name
	 * @return string Name without position
	 */
	public static function hideFAQCategoryPosition($name)
	{
		return preg_replace('/^[0-9]+\./', '', $name);
	}
	public function recalculateLevelDepth($id_faq_category)
	{
		/* Gets all children */
		$categories = Db::getInstance()->ExecuteS('
			SELECT id_faq_category, id_parent, level_depth
			FROM '._DB_PREFIX_.'faq_category
			WHERE id_parent = '.(int)$id_faq_category);
		/* Gets level_depth */
		$level = Db::getInstance()->getRow('
			SELECT level_depth
			FROM '._DB_PREFIX_.'faq_category
			WHERE id_faq_category = '.(int)$id_faq_category);
		/* Updates level_depth for all children */
		foreach ($categories as $sub_category)
		{
			Db::getInstance()->Execute('
				UPDATE '._DB_PREFIX_.'faq_category
				SET level_depth = '.(int)($level['level_depth'] + 1).'
				WHERE id_faq_category = '.(int)$sub_category['id_faq_category']);
			/* Recursive call */
			$this->recalculateLevelDepth($sub_category['id_faq_category']);
		}
	}
	public function getDuplicatePosition()
	{
		return Db::getInstance()->getRow('
		SELECT c.`id_faq_category` as id
		FROM `'._DB_PREFIX_.'faq_category` c
		WHERE c.`id_parent` = '.(int)($this->id_parent).'
		AND `position` = '.(int)($this->position).'
		AND c.`id_faq_category` != '.(int)($this->id));
	}

	public static function cleanPositions($id_faq_category_parent)
	{
		$return = true;

		$result = Db::getInstance()->ExecuteS('
		SELECT `id_faq_category`
		FROM `'._DB_PREFIX_.'faq_category`
		WHERE `id_parent` = '.(int)($id_faq_category_parent).'
		ORDER BY `position`');
		$sizeof = sizeof($result);
		for ($i = 0; $i < $sizeof; $i++){
			$sql = '
				UPDATE `'._DB_PREFIX_.'faq_category`
				SET `position` = '.(int)($i).'
				WHERE `id_parent` = '.(int)($id_faq_category_parent).'
				AND `id_faq_category` = '.(int)($result[$i]['id_faq_category']);
			$return &= Db::getInstance()->Execute($sql);
		}
		return $return;
	}
	public function calcLevelDepth()
	{
		/* Root category */
		if (!$this->id_parent)
			return 0;

		$parentCategory = new FaqCategory((int)($this->id_parent));
		if (!Validate::isLoadedObject($parentCategory))
			die('parent category does not exist');
		return $parentCategory->level_depth + 1;
	}


	public function updatePosition($way, $position)
	{


		if (!$res = Db::getInstance()->ExecuteS('
			SELECT cp.`id_faq_category`, cp.`position`, cp.`id_parent`
			FROM `'._DB_PREFIX_.'faq_category` cp
			WHERE cp.`id_parent` = '.(int)$this->id_parent.'
			ORDER BY cp.`position` ASC'
		))
			return false;

		foreach ($res AS $category)
			if ((int)($category['id_faq_category']) == (int)($this->id))
				$movedCategory = $category;

		if (!isset($movedCategory) || !isset($position))
			return false;
		// < and > statements rather than BETWEEN operator
		// since BETWEEN is treated differently according to databases

		$query1 = '
			UPDATE `'._DB_PREFIX_.'faq_category`
			SET `position`= `position` '.($way ? '- 1' : '+ 1').'
			WHERE `position`
			'.($way
				? '> '.(int)($movedCategory['position']).' AND `position` <= '.(int)($position)
				: '< '.(int)($movedCategory['position']).' AND `position` >= '.(int)($position)).'
			AND `id_parent`='.(int)($movedCategory['id_parent']);

		$query2 = '
			UPDATE `'._DB_PREFIX_.'faq_category`
			SET `position` = '.(int)($position).'
			WHERE `id_parent` = '.(int)($movedCategory['id_parent']).'
			AND `id_faq_category`='.(int)($movedCategory['id_faq_category']);

		$result = (Db::getInstance()->Execute($query1)
			AND Db::getInstance()->Execute($query2));

		return $result;
	}
	public function getName($id_lang = NULL)
	{
		if (!$id_lang)
		{


			if (isset($this->name[Context::getContext()->cookie->id_lang]))
				$id_lang = Context::getContext()->cookie->id_lang;
			else
				$id_lang = (int)(Configuration::get('PS_LANG_DEFAULT'));
		}
		return isset($this->name[$id_lang]) ? $this->name[$id_lang] : '';
	}

	public static function getCategoriesss(){


		$cat = array();
		$res = DB::getInstance()->executeS('SELECT c.id_faq_category,cl.name from '._DB_PREFIX_.'faq_category c
				join '._DB_PREFIX_.'faq_category_lang cl on (c.id_faq_category = cl.id_faq_category)
				where cl.id_lang = '.Context::getContext()->cookie->id_lang);
		foreach($res as $r)
			$cat[$r['id_faq_category']] = $r['name'];
		return $cat;
	}

	public static function getCategories($id_lang = false, $active = true, $order = true, $sql_filter = '', $sql_sort = '',$sql_limit = '')
	{
		if (!Validate::isBool($active))
			die(Tools::displayError());

		$result = Db::getInstance()->ExecuteS('
		SELECT *
		FROM `'._DB_PREFIX_.'faq_category` c
		LEFT JOIN `'._DB_PREFIX_.'faq_category_lang` cl ON c.`id_faq_category` = cl.`id_faq_category`
		WHERE 1 '.$sql_filter.' '.($id_lang ? 'AND `id_lang` = '.(int)($id_lang) : '').'
		'.($active ? 'AND `active` = 1' : '').'
		'.(!$id_lang ? 'GROUP BY c.id_faq_category' : '').'
		'.($sql_sort != '' ? $sql_sort : 'ORDER BY c.`level_depth` ASC, c.`position` ASC').'
		'.($sql_limit != '' ? $sql_limit : '')
		);

		if (!$order)
			return $result;

		$categories = array();
		foreach ($result AS $row)
			$categories[$row['id_parent']][$row['id_faq_category']]['infos'] = $row;

		return $categories;
	}

	public static function regenerateEntireNtree()
	{
		$categories = Db::getInstance()->ExecuteS('SELECT id_faq_category, id_parent FROM '._DB_PREFIX_.'faq_category ORDER BY id_parent ASC, position ASC');
		$categoriesArray = array();
		foreach ($categories AS $category)
			$categoriesArray[(int)$category['id_parent']]['subcategories'][(int)$category['id_faq_category']] = 1;
		$n = 1;
		self::_subTree($categoriesArray, 1, $n);
	}

	public function regenerateEntireNtreeNonStatic(){
		self::regenerateEntireNtree();
	}
	protected static function _subTree(&$categories, $id_faq_category, &$n)
	{
		$left = (int)$n++;
		if (isset($categories[(int)$id_faq_category]['subcategories']))
			foreach (array_keys($categories[(int)$id_faq_category]['subcategories']) AS $id_subcategory)
				self::_subTree($categories, (int)$id_subcategory, $n);
		$right = (int)$n++;

		Db::getInstance()->Execute('UPDATE '._DB_PREFIX_.'faq_category SET nleft = '.(int)$left.', nright = '.(int)$right.' WHERE id_faq_category = '.(int)$id_faq_category.' LIMIT 1');
	}

	public static function getMeta($id_faq_category){

		return DB::getInstance()->getRow('SELECT meta_description,meta_keywords from `'._DB_PREFIX_.'faq_category_lang`
			WHERE id_faq_category = '.$id_faq_category.' AND id_lang = '.Context::getContext()->cookie->id_lang);
	}

	public static function getChildren($id_parent, $id_lang, $active = true)
	{
		if (!Validate::isBool($active))
			die(Tools::displayError());

		$query = 'SELECT c.`id_faq_category`, cl.`name`, cl.`link_rewrite`
		FROM `'._DB_PREFIX_.'faq_category` c
		LEFT JOIN `'._DB_PREFIX_.'faq_category_lang` cl ON (c.`id_faq_category` = cl.`id_faq_category`)
		WHERE `id_lang` = '.(int)$id_lang.'
		AND c.`id_parent` = '.(int)$id_parent.'
		'.($active ? 'AND `active` = 1' : '').'
		
		GROUP BY c.`id_faq_category`';
		return Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($query);
	}
	public function getParentsCategories($id_lang = null)
	{
		$context = Context::getContext()->cloneContext();


		if (is_null($id_lang))
			$id_lang = $context->language->id;

		$categories = null;
		$id_current = $this->id;

		while (true)
		{
			$sql = '
			SELECT c.*, cl.*
			FROM `'._DB_PREFIX_.'faq_category` c
			LEFT JOIN `'._DB_PREFIX_.'faq_category_lang` cl
				ON (c.`id_faq_category` = cl.`id_faq_category`
				AND `id_lang` = '.(int)$id_lang.')';

			$sql .= '
			WHERE c.`id_faq_category` = '.(int)$id_current;




			$result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($sql);

			if (isset($result[0]))
				$categories[] = $result[0];
			else if (!$categories)
				$categories = array();
			if (!$result)
				return $categories;


			$id_current = $result[0]['id_parent'];
		}
	}

	public static function getTopCategory($id_lang = null)
	{
		if (is_null($id_lang))
			$id_lang = Context::getContext()->language->id;
		$id_faq_category = Db::getInstance()->getValue('
		SELECT `id_faq_category`
		FROM `'._DB_PREFIX_.'faq_category`
		WHERE `id_parent` = 0');
		return new FaqCategory($id_faq_category, $id_lang);
	}

	public static function getCategoriesWithoutParent()
	{
		return Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('
		SELECT DISTINCT c.*
		FROM `'._DB_PREFIX_.'faq_category` c
		LEFT JOIN `'._DB_PREFIX_.'faq_category_lang` cl ON (c.`id_faq_category` = cl.`id_faq_category` AND cl.`id_lang` = '.(int)Context::getContext()->language->id.')
		WHERE `level_depth` = 1
		');
	}



	public static function getDescriptionClean($description)
	{
		return strip_tags(stripslashes($description));
	}




	/* Get all CMS pages */
	public static function getAllCMSStructure($id_shop = false)
	{
		$categories = FAQCategory::getCMSCategories();
		$id_shop = ($id_shop !== false) ? $id_shop : Context::getContext()->shop->id;

		foreach ($categories as $key => $value)
			$categories[$key]['cms_pages'] = FAQCategory::getCMSPages($value['id_cms_category'], $id_shop);

		return $categories;
	}



	public static function getCMSCategories($recursive = false, $parent = 0)
	{
		if ($recursive === false)
		{
			$sql = 'SELECT bcp.`id_cms_category`, bcp.`id_parent`, bcp.`level_depth`, bcp.`active`, bcp.`position`, cl.`name`, cl.`link_rewrite`
					FROM `'._DB_PREFIX_.'cms_category` bcp
					INNER JOIN `'._DB_PREFIX_.'cms_category_lang` cl
					ON (bcp.`id_cms_category` = cl.`id_cms_category`)
					WHERE cl.`id_lang` = '.(int)Context::getContext()->language->id;
			if ($parent)
				$sql .= ' AND bcp.`id_parent` = '.(int)$parent;

			return Db::getInstance()->executeS($sql);
		}
		else
		{
			$sql = 'SELECT bcp.`id_cms_category`, bcp.`id_parent`, bcp.`level_depth`, bcp.`active`, bcp.`position`, cl.`name`, cl.`link_rewrite`
					FROM `'._DB_PREFIX_.'cms_category` bcp
					INNER JOIN `'._DB_PREFIX_.'cms_category_lang` cl
					ON (bcp.`id_cms_category` = cl.`id_cms_category`)
					WHERE cl.`id_lang` = '.(int)Context::getContext()->language->id;
			if ($parent)
				$sql .= ' AND bcp.`id_parent` = '.(int)$parent;

			$results = Db::getInstance()->executeS($sql);
			foreach ($results as $result)
			{
				$sub_categories = FAQCategory::getCMSCategories(true, $result['id_cms_category']);
				if ($sub_categories && count($sub_categories) > 0)
					$result['sub_categories'] = $sub_categories;
				$categories[] = $result;
			}

			return isset($categories) ? $categories : false;
		}

	}

	public static function getCMSPages($id_cms_category, $id_shop = false)
	{
		$id_shop = ($id_shop !== false) ? $id_shop : Context::getContext()->shop->id;

		$sql = 'SELECT c.`id_cms`, cl.`meta_title`, cl.`link_rewrite`
			FROM `'._DB_PREFIX_.'cms` c
			INNER JOIN `'._DB_PREFIX_.'cms_shop` cs
			ON (c.`id_cms` = cs.`id_cms`)
			INNER JOIN `'._DB_PREFIX_.'cms_lang` cl
			ON (c.`id_cms` = cl.`id_cms`)
			WHERE c.`id_cms_category` = '.(int)$id_cms_category.'
			AND cs.`id_shop` = '.(int)$id_shop.'
			AND cl.`id_lang` = '.(int)Context::getContext()->language->id.'
			AND c.`active` = 1
			ORDER BY `position`';

		return Db::getInstance()->executeS($sql);
	}

	public function getSubCategories($id_lang, $active = true)
	{
		if (!Validate::isBool($active))
			die(Tools::displayError());

		$result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('
		SELECT c.*, cl.id_lang, cl.name, cl.description, cl.link_rewrite, cl.meta_title, cl.meta_keywords, cl.meta_description
		FROM `'._DB_PREFIX_.'faq_category` c
		LEFT JOIN `'._DB_PREFIX_.'faq_category_lang` cl ON (c.`id_faq_category` = cl.`id_faq_category` AND `id_lang` = '.(int)$id_lang.')
		WHERE `id_parent` = '.(int)$this->id.'
		'.($active ? 'AND `active` = 1' : '').'
		GROUP BY c.`id_faq_category`
		ORDER BY `position` ASC');

		// Modify SQL result
		foreach ($result as &$row)
			$row['name'] = FAQCategory::hideFAQCategoryPosition($row['name']);
		return $result;
	}
	public static function recurseFAQCategory($categories, $current, $id_faq_category = 1, $id_selected = 1, $is_html = 0)
	{
		$html = '<option value="'.Context::getContext()->link->getFAQCategoryLink($id_faq_category).'"'.(($id_selected == $id_faq_category) ? ' selected="selected"' : '').'>'
			.str_repeat('&nbsp;', $current['infos']['level_depth'] * 5)
			.FAQCategory::hideFAQCategoryPosition(stripslashes($current['infos']['name'])).'</option>';
		if ($is_html == 0)
			echo $html;
		if (isset($categories[$id_faq_category]))
			foreach (array_keys($categories[$id_faq_category]) as $key)
				$html .= FAQCategory::recurseFAQCategory($categories, $categories[$id_faq_category][$key], $key, $id_selected, $is_html);
		return $html;
	}

	public static function recurseFAQCategoryOptions($categories, $current, $id_faq_category = 1, $val_name)
	{
		$options[] = 	array(
			$val_name => $id_faq_category,
			'name' => str_repeat('&nbsp;', $current['infos']['level_depth'] * 5)
				.FAQCategory::hideFAQCategoryPosition(stripslashes($current['infos']['name']))
		);

		if (isset($categories[$id_faq_category]))
			foreach (array_keys($categories[$id_faq_category]) as $key)
				$options = array_merge($options, FAQCategory::recurseFAQCategoryOptions($categories, $categories[$id_faq_category][$key], $key, $val_name));
		return $options;
	}



}
